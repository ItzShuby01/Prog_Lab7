package org.example.client.util;

import org.example.common.data.*;
import org.example.common.util.ValidationUtil;

import java.time.LocalDateTime;
import java.util.Iterator;
import java.util.NoSuchElementException;

//Builds a Person object from user input or script.
public class PersonBuilder {

  // Iterates over script file lines and return Person object
  public static Person buildFromScript(Iterator<String> scriptIterator) {
    try {
      // Using the iterator to read lines one by one
      String name = scriptIterator.next().trim();
      int x = Integer.parseInt(scriptIterator.next().trim());
      double y = Double.parseDouble(scriptIterator.next().trim());
      double height = Double.parseDouble(scriptIterator.next().trim());
      EyeColor eyeColor = EyeColor.valueOf(scriptIterator.next().trim().toUpperCase());
      HairColor hairColor = HairColor.valueOf(scriptIterator.next().trim().toUpperCase());

      // Handle optional Nationality
      Country nationality = null;
      String nationalityString = scriptIterator.next().trim();
      if (!nationalityString.isEmpty()) {
        nationality = Country.valueOf(nationalityString.toUpperCase());
      }

      // Handle optional Location based on a 'y' or 'n' prompt
      Location location = null;
      String hasLocation = scriptIterator.next().trim().toLowerCase();
      if ("y".equals(hasLocation)) {
        float locationX = Float.parseFloat(scriptIterator.next().trim());
        float locationY = Float.parseFloat(scriptIterator.next().trim());
        String locationName = scriptIterator.next().trim();
        location = new Location(locationX,
                Float.valueOf(locationY),
                locationName);
      } else if (!"n".equals(hasLocation)) {
        throw new IllegalArgumentException("Invalid input for location prompt. Use 'y' or 'n'.");
      }

      Person person = new Person(
              Integer.valueOf(0), // ID is generated by the database
              name,
              new Coordinates(Integer.valueOf(x), Double.valueOf(y)),
              LocalDateTime.now(),
              Double.valueOf(height),
              eyeColor,
              hairColor,
              nationality,
              location
      );

      // Final validation
      String validationError = ValidationUtil.validatePerson(person);
      if (validationError != null) {
        throw new IllegalArgumentException(validationError);
      }

      return person;

    } catch (NumberFormatException e) {
      throw new IllegalArgumentException(
              "Error parsing numerical data from script: " + e.getMessage()
      );
    } catch (NoSuchElementException e) {
      throw new IllegalArgumentException(
              "Script ended unexpectedly while building Person object. Missing data."
      );
    } catch (IllegalArgumentException e) {
      throw new IllegalArgumentException("Error building person from script: " + e.getMessage());
    }
  }
}

